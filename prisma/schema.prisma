// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String?  // For credentials login
  avatar    String?
  phone     String?
  birthday  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  coupleAsUser1     Couple?  @relation("CoupleUser1")
  coupleAsUser2     Couple?  @relation("CoupleUser2")
  diaryEntries      DiaryEntry[]
  bucketListItems   BucketListItem[]
  expenses          Expense[]
  moodEntries       MoodEntry[]
  gameResponses     GameResponse[]
  notifications     Notification[]

  @@map("users")
}

model Couple {
  id              String    @id @default(cuid())
  user1Id         String    @unique
  user2Id         String    @unique
  relationshipStart DateTime
  anniversaryDate DateTime?
  coupleGoals     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user1           User      @relation("CoupleUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2           User      @relation("CoupleUser2", fields: [user2Id], references: [id], onDelete: Cascade)
  diaryEntries    DiaryEntry[]
  bucketList      BucketListItem[]
  events          Event[]
  places          Place[]
  expenses        Expense[]
  gameQuestions   GameQuestion[]
  loveMessages    LoveMessage[]

  @@map("couples")
}

model DiaryEntry {
  id          String   @id @default(cuid())
  coupleId    String
  authorId    String
  title       String
  content     String
  entryDate   DateTime @default(now()) // Custom date for the diary entry
  images      String? // Comma-separated base64 images (SQLite TEXT)
  videos      String? // Comma-separated video URLs
  mood        String?
  tags        String?
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  couple      Couple   @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("diary_entries")
}

model BucketListItem {
  id          String   @id @default(cuid())
  coupleId    String
  createdById String
  title       String
  description String?
  category    String   // travel, adventure, food, experience, etc.
  priority    String   @default("medium") // high, medium, low
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  proofImages String? // Comma-separated proof photos when completed
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  couple      Couple   @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("bucket_list_items")
}

model Event {
  id          String   @id @default(cuid())
  coupleId    String
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  location    String?
  type        String   // date, anniversary, reminder, etc.
  reminder    DateTime?
  isRecurring Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  couple      Couple   @relation(fields: [coupleId], references: [id], onDelete: Cascade)

  @@map("events")
}

model Place {
  id          String   @id @default(cuid())
  coupleId    String
  name        String
  description String?
  latitude    Float
  longitude   Float
  address     String?
  visitDate   DateTime?
  images      String?
  memories    String?
  rating      Int?     // 1-5 stars
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  couple      Couple   @relation(fields: [coupleId], references: [id], onDelete: Cascade)

  @@map("places")
}

model Expense {
  id          String   @id @default(cuid())
  coupleId    String
  paidById    String
  title       String
  amount      Float
  currency    String   @default("VND")
  category    String   // food, entertainment, travel, gifts, etc.
  description String?
  date        DateTime @default(now())
  splitType   String   @default("equal") // equal, custom, full
  paidByOther Float?   // Amount paid by the other person
  receipt     String?  // Receipt image URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  couple      Couple   @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  paidBy      User     @relation(fields: [paidById], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model GameQuestion {
  id          String   @id @default(cuid())
  coupleId    String
  question    String
  category    String   // getting_to_know, fun, deep, etc.
  askedDate   DateTime @default(now())
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  couple      Couple         @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  responses   GameResponse[]

  @@map("game_questions")
}

model GameResponse {
  id           String   @id @default(cuid())
  questionId   String
  userId       String
  response     String
  submittedAt  DateTime @default(now())

  // Relations
  question     GameQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("game_responses")
}

model MoodEntry {
  id        String   @id @default(cuid())
  userId    String
  mood      String   // happy, sad, excited, stressed, etc.
  intensity Int      // 1-10
  note      String?
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mood_entries")
}

model LoveMessage {
  id        String   @id @default(cuid())
  coupleId  String
  message   String
  type      String   // daily, anniversary, special
  sentDate  DateTime @default(now())
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  couple    Couple   @relation(fields: [coupleId], references: [id], onDelete: Cascade)

  @@map("love_messages")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   // reminder, anniversary, mood_check, etc.
  isRead    Boolean  @default(false)
  data      String?    // Additional data for the notification
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
