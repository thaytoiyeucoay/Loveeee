'use client'

import React, { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { useSession } from 'next-auth/react'
import {
  Smile,
  Frown,
  Meh,
  Heart,
  TrendingUp,
  Calendar,
  MessageCircle,
  AlertCircle,
  ThumbsUp,
  Coffee,
  Sun,
  Cloud,
  CloudRain,
  Zap,
  Star,
  Plus,
  Filter,
  X,
  Trash2
} from 'lucide-react'

export default function MoodPage() {
  const { data: session } = useSession()
  const [selectedMood, setSelectedMood] = useState<string | null>(null)
  const [viewPeriod, setViewPeriod] = useState<'week' | 'month' | 'year'>('week')
  const [showAddMood, setShowAddMood] = useState(false)
  const [entries, setEntries] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')
  
  // New mood form
  const [newMoodForm, setNewMoodForm] = useState({
    mood: '',
    intensity: 5,
    note: '',
    date: new Date().toISOString().split('T')[0]
  })

  const moods = [
    { id: 'amazing', emoji: 'ü§©', label: 'Tuy·ªát v·ªùi', color: 'bg-green-500', value: 10 },
    { id: 'happy', emoji: 'üòä', label: 'Vui v·∫ª', color: 'bg-green-400', value: 9 },
    { id: 'good', emoji: 'üôÇ', label: 'T·ªët', color: 'bg-blue-400', value: 8 },
    { id: 'okay', emoji: 'üòê', label: 'B√¨nh th∆∞·ªùng', color: 'bg-yellow-400', value: 7 },
    { id: 'meh', emoji: 'üòï', label: 'T·∫°m ƒë∆∞·ª£c', color: 'bg-orange-400', value: 6 },
    { id: 'sad', emoji: 'üò¢', label: 'Bu·ªìn', color: 'bg-red-400', value: 4 },
    { id: 'angry', emoji: 'üò†', label: 'T·ª©c gi·∫≠n', color: 'bg-red-500', value: 3 },
    { id: 'stressed', emoji: 'üò∞', label: 'CƒÉng th·∫≥ng', color: 'bg-purple-500', value: 2 }
  ]

  // Fetch mood entries
  const fetchEntries = async () => {
    if (!session?.user?.id) return

    setLoading(true)
    try {
      const daysMap = { week: 7, month: 30, year: 365 }
      const response = await fetch(`/api/mood?userId=${session.user.id}&days=${daysMap[viewPeriod]}`)
      
      if (response.ok) {
        const data = await response.json()
        console.log('Mood entries fetched:', data.entries)
        setEntries(data.entries || [])
      } else {
        const error = await response.json()
        setError(error.error)
      }
    } catch (error) {
      console.error('Error fetching mood entries:', error)
      setError('Failed to fetch mood entries')
    } finally {
      setLoading(false)
    }
  }

  // Create new mood entry
  const handleCreateMood = async () => {
    if (!session?.user?.id || !newMoodForm.mood) {
      setError('Vui l√≤ng ch·ªçn t√¢m tr·∫°ng')
      return
    }

    try {
      const response = await fetch('/api/mood', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId: session.user.id,
          mood: newMoodForm.mood,
          intensity: newMoodForm.intensity,
          note: newMoodForm.note,
          date: newMoodForm.date
        })
      })

      if (response.ok) {
        const result = await response.json()
        // Add new entry to local state
        setEntries(prev => [result.entry, ...prev])
        // Reset form
        setNewMoodForm({
          mood: '',
          intensity: 5,
          note: '',
          date: new Date().toISOString().split('T')[0]
        })
        setShowAddMood(false)
        alert('‚úÖ Mood ƒë√£ ƒë∆∞·ª£c ghi l·∫°i!')
      } else {
        const error = await response.json()
        setError(error.error)
      }
    } catch (error) {
      console.error('Error creating mood entry:', error)
      setError('Failed to create mood entry')
    }
  }

  // Delete mood entry
  const handleDeleteMood = async (entryId: string) => {
    if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a mood entry n√†y?')) return

    try {
      const response = await fetch(`/api/mood?entryId=${entryId}&userId=${session?.user?.id}`, {
        method: 'DELETE'
      })

      if (response.ok) {
        // Remove from local state
        setEntries(prev => prev.filter(entry => entry.id !== entryId))
        alert('‚úÖ Mood entry ƒë√£ ƒë∆∞·ª£c x√≥a!')
      } else {
        const error = await response.json()
        alert('‚ùå ' + error.error)
      }
    } catch (error) {
      console.error('Error deleting mood entry:', error)
      alert('‚ùå Failed to delete mood entry')
    }
  }

  // Fetch entries on session/period change
  useEffect(() => {
    fetchEntries()
  }, [session?.user?.id, viewPeriod])

  // Show loading state
  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
        <span className="ml-2 text-gray-600">ƒêang t·∫£i t√¢m tr·∫°ng...</span>
      </div>
    )
  }

  // Calculate mood statistics from real data
  const getMoodStats = () => {
    if (entries.length === 0) {
      return {
        userAverage: 0,
        totalEntries: 0,
        overallAverage: 0
      }
    }
    
    const avgIntensity = entries.reduce((sum, entry) => sum + entry.intensity, 0) / entries.length
    
    return {
      userAverage: Math.round(avgIntensity * 10) / 10,
      totalEntries: entries.length,
      overallAverage: Math.round(avgIntensity * 10) / 10
    }
  }

  const stats = getMoodStats()

  const getMoodColor = (moodId: string) => {
    const mood = moods.find(m => m.id === moodId)
    return mood?.color || 'bg-gray-400'
  }

  const getMoodEmoji = (moodId: string) => {
    const mood = moods.find(m => m.id === moodId)
    return mood?.emoji || 'üòê'
  }

  const supportMessages = [
    {
      id: 1,
      trigger: 'sad',
      message: 'Anh th·∫•y em bu·ªìn r·ªìi. Anh c√≥ th·ªÉ l√†m g√¨ ƒë·ªÉ em vui h∆°n kh√¥ng? ‚ù§Ô∏è',
      suggested_actions: ['G·ªçi ƒëi·ªán', 'G·ª≠i hoa', 'ƒê·∫øn g·∫∑p']
    },
    {
      id: 2,
      trigger: 'stressed',
      message: 'Em c√≥ v·∫ª cƒÉng th·∫≥ng. Ch√∫ng ta c√πng th∆∞ gi√£n m·ªôt ch√∫t nh√©?',
      suggested_actions: ['Massage', 'Xem phim', 'ƒêi d·∫°o']
    },
    {
      id: 3,
      trigger: 'angry',
      message: 'Anh bi·∫øt em ƒëang t·ª©c gi·∫≠n. Anh xin l·ªói v√† mu·ªën n√≥i chuy·ªán v·ªõi em.',
      suggested_actions: ['N√≥i chuy·ªán', 'Xin l·ªói', 'Th·ªùi gian']
    }
  ]

  const moodInsights = [
    'C·∫£ hai b·∫°n ƒë·ªÅu c√≥ t√¢m tr·∫°ng t√≠ch c·ª±c nh·∫•t v√†o cu·ªëi tu·∫ßn',
    'Th·ªùi ti·∫øt n·∫Øng th∆∞·ªùng l√†m t√¢m tr·∫°ng t·ªët h∆°n',
    'C√°c ho·∫°t ƒë·ªông c√πng nhau gi√∫p c·∫£i thi·ªán mood ƒë√°ng k·ªÉ',
    'C·∫ßn ch√∫ √Ω h·ªó tr·ª£ nhau nhi·ªÅu h∆°n trong nh·ªØng ng√†y stress'
  ]

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold text-gray-800 mb-2">T√¢m tr·∫°ng & C·∫£m x√∫c</h1>
          <p className="text-gray-600">Theo d√µi v√† chia s·∫ª c·∫£m x√∫c v·ªõi nhau m·ªói ng√†y</p>
        </div>
        <button 
          onClick={() => setShowAddMood(true)}
          className="btn-primary inline-flex items-center gap-2 w-fit"
        >
          <Plus className="w-5 h-5" />
          Th√™m t√¢m tr·∫°ng
        </button>
      </div>

      {/* Quick Mood Check-in */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="card bg-gradient-to-r from-purple-500 to-pink-500 text-white"
      >
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-2">H√¥m nay b·∫°n c·∫£m th·∫•y th·∫ø n√†o?</h2>
          <p className="opacity-90 mb-6">Ch·ªçn t√¢m tr·∫°ng hi·ªán t·∫°i c·ªßa b·∫°n</p>
          
          <div className="grid grid-cols-4 lg:grid-cols-8 gap-3 max-w-4xl mx-auto">
            {moods.map((mood) => (
              <button
                key={mood.id}
                onClick={() => setSelectedMood(mood.id)}
                className={`p-4 rounded-xl bg-white bg-opacity-20 hover:bg-opacity-30 transition-all transform hover:scale-105 ${
                  selectedMood === mood.id ? 'bg-opacity-40 scale-105' : ''
                }`}
              >
                <div className="text-3xl mb-2">{mood.emoji}</div>
                <div className="text-sm font-medium">{mood.label}</div>
              </button>
            ))}
          </div>
        </div>
      </motion.div>

      {/* Stats Overview */}
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="card text-center"
        >
          <div className="w-12 h-12 bg-gradient-to-r from-green-500 to-blue-500 rounded-xl flex items-center justify-center mx-auto mb-3">
            <TrendingUp className="w-6 h-6 text-white" />
          </div>
          <div className="text-2xl font-bold text-gray-800 mb-1">{stats.overallAverage}/10</div>
          <div className="text-sm text-gray-600">T√¢m tr·∫°ng chung</div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="card text-center"
        >
          <div className="w-12 h-12 bg-gradient-to-r from-pink-500 to-red-500 rounded-xl flex items-center justify-center mx-auto mb-3">
            <Heart className="w-6 h-6 text-white" />
          </div>
          <div className="text-2xl font-bold text-gray-800 mb-1">{stats.userAverage}/10</div>
          <div className="text-sm text-gray-600">T√¢m tr·∫°ng b·∫°n</div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="card text-center"
        >
          <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center mx-auto mb-3">
            <Smile className="w-6 h-6 text-white" />
          </div>
          <div className="text-2xl font-bold text-gray-800 mb-1">{stats.overallAverage}/10</div>
          <div className="text-sm text-gray-600">Trung b√¨nh</div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
          className="card text-center"
        >
          <div className="w-12 h-12 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-xl flex items-center justify-center mx-auto mb-3">
            <Calendar className="w-6 h-6 text-white" />
          </div>
          <div className="text-2xl font-bold text-gray-800 mb-1">{stats.totalEntries}</div>
          <div className="text-sm text-gray-600">L·∫ßn check-in</div>
        </motion.div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Recent Mood Entries */}
        <div className="lg:col-span-2 space-y-4">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-bold text-gray-800">T√¢m tr·∫°ng g·∫ßn ƒë√¢y</h2>
            <div className="flex bg-gray-100 rounded-lg p-1">
              {[
                { id: 'week', label: 'Tu·∫ßn' },
                { id: 'month', label: 'Th√°ng' },
                { id: 'year', label: 'NƒÉm' }
              ].map((period) => (
                <button
                  key={period.id}
                  onClick={() => setViewPeriod(period.id as any)}
                  className={`px-3 py-1 rounded-md text-sm font-medium transition-all ${
                    viewPeriod === period.id 
                      ? 'bg-white shadow-sm text-gray-900' 
                      : 'text-gray-600 hover:text-gray-900'
                  }`}
                >
                  {period.label}
                </button>
              ))}
            </div>
          </div>

          {entries.map((entry: any, index: number) => {
            return (
              <motion.div
                key={entry.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                className="card hover:shadow-lg transition-all group"
              >
                <div className="flex items-start gap-4">
                  <div className="flex flex-col items-center">
                    <div className={`w-12 h-12 rounded-full flex items-center justify-center text-white text-xl ${getMoodColor(entry.mood)}`}>
                      {getMoodEmoji(entry.mood)}
                    </div>
                    <div className="text-xs text-gray-500 mt-1">{entry.intensity}/10</div>
                  </div>
                  
                  <div className="flex-1">
                    <div className="flex items-start justify-between mb-2">
                      <div>
                        <div className="flex items-center gap-2 mb-1">
                          <span className="font-semibold text-gray-800">{entry.user?.name || 'User'}</span>
                          <span className="text-sm text-gray-500">
                            {new Date(entry.date || entry.createdAt).toLocaleString('vi-VN')}
                          </span>
                        </div>
                      </div>
                      <button
                        onClick={() => handleDeleteMood(entry.id)}
                        className="p-2 text-red-500 hover:bg-red-50 rounded-lg opacity-0 group-hover:opacity-100 transition-all"
                        title="X√≥a mood entry"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                    
                    {entry.note && (
                      <p className="text-gray-700 mb-3">{entry.note}</p>
                    )}
                    
                    <div className="flex items-center justify-between text-sm">
                      <div className={`px-3 py-1 rounded-full text-white ${getMoodColor(entry.mood)}`}>
                        {getMoodEmoji(entry.mood)} {moods.find(m => m.id === entry.mood)?.label || entry.mood}
                      </div>
                      <span className="text-gray-500">
                        M·ª©c ƒë·ªô: {entry.intensity}/10
                      </span>
                    </div>
                  </div>
                </div>
              </motion.div>
            )
          })}

          {/* Empty State */}
          {entries.length === 0 && (
            <div className="text-center py-12">
              <Heart className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-gray-600 mb-2">Ch∆∞a c√≥ t√¢m tr·∫°ng n√†o</h3>
              <p className="text-gray-500 mb-6">H√£y b·∫Øt ƒë·∫ßu ghi l·∫°i c·∫£m x√∫c c·ªßa b·∫°n m·ªói ng√†y!</p>
              <button 
                onClick={() => setShowAddMood(true)}
                className="btn-primary"
              >
                Th√™m t√¢m tr·∫°ng ƒë·∫ßu ti√™n
              </button>
            </div>
          )}
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Support Alert */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            className="card bg-yellow-50 border-yellow-200"
          >
            <div className="flex items-start gap-3">
              <AlertCircle className="w-6 h-6 text-yellow-600 flex-shrink-0 mt-1" />
              <div>
                <h3 className="font-semibold text-yellow-800 mb-1">Th√¥ng b√°o quan t√¢m</h3>
                <p className="text-yellow-700 text-sm mb-3">
                  Ng∆∞·ªùi y√™u c√≥ v·∫ª cƒÉng th·∫≥ng h√¥m qua. H√£y g·ª≠i l·ªùi ƒë·ªông vi√™n nh√©!
                </p>
                <div className="flex gap-2">
                  <button className="px-3 py-1 bg-yellow-200 hover:bg-yellow-300 text-yellow-800 text-xs rounded-full transition-colors">
                    G·ªçi ƒëi·ªán
                  </button>
                  <button className="px-3 py-1 bg-yellow-200 hover:bg-yellow-300 text-yellow-800 text-xs rounded-full transition-colors">
                    Nh·∫Øn tin
                  </button>
                </div>
              </div>
            </div>
          </motion.div>

          {/* Mood Insights */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.2 }}
            className="card"
          >
            <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
              <Star className="w-5 h-5 text-primary-600" />
              Nh·∫≠n x√©t & G√≥p √Ω
            </h3>
            <div className="space-y-3">
              {moodInsights.map((insight, index) => (
                <div key={index} className="flex items-start gap-3 p-3 bg-blue-50 rounded-lg">
                  <ThumbsUp className="w-4 h-4 text-blue-600 flex-shrink-0 mt-0.5" />
                  <p className="text-blue-800 text-sm">{insight}</p>
                </div>
              ))}
            </div>
          </motion.div>

          {/* Quick Actions */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.3 }}
            className="card"
          >
            <h3 className="text-lg font-semibold text-gray-800 mb-4">H√†nh ƒë·ªông nhanh</h3>
            <div className="space-y-2">
              <button className="w-full p-3 text-left bg-pink-50 hover:bg-pink-100 rounded-lg transition-colors group">
                <div className="flex items-center gap-3">
                  <Heart className="w-5 h-5 text-pink-600" />
                  <div>
                    <div className="font-medium text-pink-800 text-sm">G·ª≠i l·ªùi y√™u th∆∞∆°ng</div>
                    <div className="text-pink-600 text-xs">G·ª≠i tin nh·∫Øn ƒë·ªông vi√™n</div>
                  </div>
                </div>
              </button>
              
              <button className="w-full p-3 text-left bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors group">
                <div className="flex items-center gap-3">
                  <Coffee className="w-5 h-5 text-blue-600" />
                  <div>
                    <div className="font-medium text-blue-800 text-sm">L√™n k·∫ø ho·∫°ch th∆∞ gi√£n</div>
                    <div className="text-blue-600 text-xs">T·∫°o ho·∫°t ƒë·ªông c√πng nhau</div>
                  </div>
                </div>
              </button>
              
              <button className="w-full p-3 text-left bg-green-50 hover:bg-green-100 rounded-lg transition-colors group">
                <div className="flex items-center gap-3">
                  <MessageCircle className="w-5 h-5 text-green-600" />
                  <div>
                    <div className="font-medium text-green-800 text-sm">Tr√≤ chuy·ªán s√¢u</div>
                    <div className="text-green-600 text-xs">Chia s·∫ª c·∫£m x√∫c th·∫≠t l√≤ng</div>
                  </div>
                </div>
              </button>
            </div>
          </motion.div>

          {/* Mood History Chart Preview */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.4 }}
            className="card"
          >
            <h3 className="text-lg font-semibold text-gray-800 mb-4">Xu h∆∞·ªõng t√¢m tr·∫°ng</h3>
            <div className="h-32 bg-gray-50 rounded-lg flex items-center justify-center">
              <div className="text-center text-gray-500">
                <TrendingUp className="w-8 h-8 mx-auto mb-2" />
                <p className="text-sm">Bi·ªÉu ƒë·ªì xu h∆∞·ªõng</p>
                <p className="text-xs">S·∫Øp ra m·∫Øt</p>
              </div>
            </div>
          </motion.div>
        </div>
      </div>

      {/* Add Mood Modal */}
      {showAddMood && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <motion.div 
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            className="bg-white rounded-2xl max-w-lg w-full p-6 max-h-[90vh] overflow-y-auto"
          >
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-bold text-gray-800">Th√™m t√¢m tr·∫°ng m·ªõi</h3>
              <button 
                onClick={() => setShowAddMood(false)}
                className="p-2 hover:bg-gray-100 rounded-lg"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            {error && (
              <div className="p-4 bg-red-50 border border-red-200 rounded-lg text-red-700 mb-4">
                {error}
              </div>
            )}

            <div className="space-y-4">
              {/* Mood Selection */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">T√¢m tr·∫°ng hi·ªán t·∫°i *</label>
                <div className="grid grid-cols-4 gap-3">
                  {moods.map((mood) => (
                    <button
                      key={mood.id}
                      onClick={() => setNewMoodForm(prev => ({ ...prev, mood: mood.id }))}
                      className={`p-3 rounded-lg border-2 transition-all text-center ${
                        newMoodForm.mood === mood.id
                          ? 'border-primary-500 bg-primary-50'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-2xl mb-1">{mood.emoji}</div>
                      <div className="text-xs text-gray-600">{mood.label}</div>
                    </button>
                  ))}
                </div>
              </div>

              {/* Intensity Slider */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  M·ª©c ƒë·ªô c∆∞·ªùng ƒë·ªô: {newMoodForm.intensity}/10
                </label>
                <input
                  type="range"
                  min="1"
                  max="10"
                  value={newMoodForm.intensity}
                  onChange={(e) => setNewMoodForm(prev => ({ ...prev, intensity: parseInt(e.target.value) }))}
                  className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                />
                <div className="flex justify-between text-xs text-gray-500 mt-1">
                  <span>R·∫•t th·∫•p</span>
                  <span>R·∫•t cao</span>
                </div>
              </div>

              {/* Note */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Ghi ch√∫</label>
                <textarea
                  rows={3}
                  value={newMoodForm.note}
                  onChange={(e) => setNewMoodForm(prev => ({ ...prev, note: e.target.value }))}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                  placeholder="M√¥ t·∫£ c·∫£m x√∫c c·ªßa b·∫°n..."
                />
              </div>

              {/* Date */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Ng√†y</label>
                <input
                  type="date"
                  value={newMoodForm.date}
                  onChange={(e) => setNewMoodForm(prev => ({ ...prev, date: e.target.value }))}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                />
              </div>
            </div>

            {/* Actions */}
            <div className="flex justify-end gap-3 mt-6 pt-4 border-t">
              <button
                onClick={() => setShowAddMood(false)}
                className="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
              >
                H·ªßy
              </button>
              <button
                onClick={handleCreateMood}
                disabled={!newMoodForm.mood}
                className="px-6 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors disabled:opacity-50"
              >
                L∆∞u t√¢m tr·∫°ng
              </button>
            </div>
          </motion.div>
        </div>
      )}
    </div>
  )
}
