'use client'

import React, { useState } from 'react'
import { motion } from 'framer-motion'
import {
  ArrowLeft,
  Bell,
  BellOff,
  Image,
  File,
  Trash2,
  Download,
  Lock,
  Eye,
  EyeOff,
  Palette,
  Moon,
  Sun,
  Volume2,
  VolumeX,
  Save
} from 'lucide-react'
import Link from 'next/link'

export default function ChatSettingsPage() {
  const [settings, setSettings] = useState({
    notifications: {
      messageNotifications: true,
      soundEnabled: true,
      vibrationEnabled: true,
      showPreview: true,
      quietHours: false,
      quietStart: '22:00',
      quietEnd: '08:00'
    },
    privacy: {
      readReceipts: true,
      lastSeen: true,
      onlineStatus: true,
      blockScreenshots: false
    },
    appearance: {
      theme: 'light', // light, dark, auto
      bubbleStyle: 'modern', // modern, classic, minimal
      fontSize: 'medium', // small, medium, large
      chatWallpaper: 'default'
    },
    storage: {
      autoDownloadImages: true,
      autoDownloadVideos: false,
      autoDownloadFiles: false,
      mediaQuality: 'high' // low, medium, high
    }
  })

  const updateSetting = (category: keyof typeof settings, key: string, value: any) => {
    setSettings(prev => ({
      ...prev,
      [category]: {
        ...prev[category],
        [key]: value
      }
    }))
  }

  const wallpapers = [
    { id: 'default', name: 'M·∫∑c ƒë·ªãnh', preview: 'üé®' },
    { id: 'hearts', name: 'Tr√°i tim', preview: 'üíï' },
    { id: 'flowers', name: 'Hoa l√°', preview: 'üå∏' },
    { id: 'gradient', name: 'Gradient', preview: 'üåà' },
    { id: 'minimal', name: 'T·ªëi gi·∫£n', preview: '‚ö™' },
    { id: 'romantic', name: 'L√£ng m·∫°n', preview: 'üåπ' }
  ]

  const themes = [
    { id: 'light', name: 'S√°ng', icon: Sun },
    { id: 'dark', name: 'T·ªëi', icon: Moon },
    { id: 'auto', name: 'T·ª± ƒë·ªông', icon: Palette }
  ]

  const bubbleStyles = [
    { id: 'modern', name: 'Hi·ªán ƒë·∫°i', description: 'G√≥c bo tr√≤n, gradient m√†u' },
    { id: 'classic', name: 'C·ªï ƒëi·ªÉn', description: 'H√¨nh ch·ªØ nh·∫≠t bo g√≥c' },
    { id: 'minimal', name: 'T·ªëi gi·∫£n', description: 'ƒê∆°n gi·∫£n, m√†u tr∆°n' }
  ]

  const fontSizes = [
    { id: 'small', name: 'Nh·ªè', sample: 'Aa' },
    { id: 'medium', name: 'V·ª´a', sample: 'Aa' },
    { id: 'large', name: 'L·ªõn', sample: 'Aa' }
  ]

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Link 
          href="/dashboard/chat"
          className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
        >
          <ArrowLeft className="w-5 h-5" />
        </Link>
        <div>
          <h1 className="text-2xl font-bold text-gray-800">C√†i ƒë·∫∑t Chat</h1>
          <p className="text-gray-600">T√πy ch·ªânh tr·∫£i nghi·ªám chat c·ªßa b·∫°n</p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Notifications */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="card"
        >
          <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
            <Bell className="w-5 h-5 text-primary-500" />
            Th√¥ng b√°o
          </h3>

          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium text-gray-800">Th√¥ng b√°o tin nh·∫Øn</div>
                <div className="text-sm text-gray-600">Nh·∫≠n th√¥ng b√°o khi c√≥ tin nh·∫Øn m·ªõi</div>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={settings.notifications.messageNotifications}
                  onChange={(e) => updateSetting('notifications', 'messageNotifications', e.target.checked)}
                  className="sr-only peer"
                />
                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
              </label>
            </div>

            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium text-gray-800">√Çm thanh</div>
                <div className="text-sm text-gray-600">Ph√°t √¢m thanh khi c√≥ tin nh·∫Øn</div>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={settings.notifications.soundEnabled}
                  onChange={(e) => updateSetting('notifications', 'soundEnabled', e.target.checked)}
                  className="sr-only peer"
                />
                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
              </label>
            </div>

            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium text-gray-800">Hi·ªÉn th·ªã n·ªôi dung</div>
                <div className="text-sm text-gray-600">Hi·ªÉn th·ªã preview tin nh·∫Øn trong th√¥ng b√°o</div>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={settings.notifications.showPreview}
                  onChange={(e) => updateSetting('notifications', 'showPreview', e.target.checked)}
                  className="sr-only peer"
                />
                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
              </label>
            </div>

            <div className="border-t pt-4">
              <div className="flex items-center justify-between mb-3">
                <div>
                  <div className="font-medium text-gray-800">Gi·ªù y√™n tƒ©nh</div>
                  <div className="text-sm text-gray-600">T·∫Øt th√¥ng b√°o trong khung gi·ªù n√†y</div>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input
                    type="checkbox"
                    checked={settings.notifications.quietHours}
                    onChange={(e) => updateSetting('notifications', 'quietHours', e.target.checked)}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                </label>
              </div>

              {settings.notifications.quietHours && (
                <div className="grid grid-cols-2 gap-3">
                  <div>
                    <label className="block text-sm text-gray-600 mb-1">T·ª´</label>
                    <input
                      type="time"
                      value={settings.notifications.quietStart}
                      onChange={(e) => updateSetting('notifications', 'quietStart', e.target.value)}
                      className="input-field"
                    />
                  </div>
                  <div>
                    <label className="block text-sm text-gray-600 mb-1">ƒê·∫øn</label>
                    <input
                      type="time"
                      value={settings.notifications.quietEnd}
                      onChange={(e) => updateSetting('notifications', 'quietEnd', e.target.value)}
                      className="input-field"
                    />
                  </div>
                </div>
              )}
            </div>
          </div>
        </motion.div>

        {/* Privacy */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="card"
        >
          <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
            <Lock className="w-5 h-5 text-green-500" />
            Quy·ªÅn ri√™ng t∆∞
          </h3>

          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium text-gray-800">X√°c nh·∫≠n ƒë√£ ƒë·ªçc</div>
                <div className="text-sm text-gray-600">Hi·ªÉn th·ªã d·∫•u tick xanh khi ƒë√£ ƒë·ªçc</div>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={settings.privacy.readReceipts}
                  onChange={(e) => updateSetting('privacy', 'readReceipts', e.target.checked)}
                  className="sr-only peer"
                />
                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
              </label>
            </div>

            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium text-gray-800">L·∫ßn cu·ªëi online</div>
                <div className="text-sm text-gray-600">Hi·ªÉn th·ªã th·ªùi gian online cu·ªëi</div>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={settings.privacy.lastSeen}
                  onChange={(e) => updateSetting('privacy', 'lastSeen', e.target.checked)}
                  className="sr-only peer"
                />
                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
              </label>
            </div>

            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium text-gray-800">Tr·∫°ng th√°i online</div>
                <div className="text-sm text-gray-600">Hi·ªÉn th·ªã khi b·∫°n ƒëang online</div>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={settings.privacy.onlineStatus}
                  onChange={(e) => updateSetting('privacy', 'onlineStatus', e.target.checked)}
                  className="sr-only peer"
                />
                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
              </label>
            </div>

            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium text-gray-800">Ch·∫∑n ch·ª•p m√†n h√¨nh</div>
                <div className="text-sm text-gray-600">NgƒÉn ch·ª•p m√†n h√¨nh chat (beta)</div>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={settings.privacy.blockScreenshots}
                  onChange={(e) => updateSetting('privacy', 'blockScreenshots', e.target.checked)}
                  className="sr-only peer"
                />
                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
              </label>
            </div>
          </div>
        </motion.div>

        {/* Appearance */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="card"
        >
          <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
            <Palette className="w-5 h-5 text-purple-500" />
            Giao di·ªán
          </h3>

          <div className="space-y-6">
            {/* Theme */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">Ch·ªß ƒë·ªÅ</label>
              <div className="grid grid-cols-3 gap-3">
                {themes.map((theme) => (
                  <button
                    key={theme.id}
                    onClick={() => updateSetting('appearance', 'theme', theme.id)}
                    className={`p-3 rounded-lg border-2 transition-all ${
                      settings.appearance.theme === theme.id
                        ? 'border-purple-500 bg-purple-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <theme.icon className="w-6 h-6 mx-auto mb-2 text-gray-600" />
                    <div className="text-sm font-medium text-gray-700">{theme.name}</div>
                  </button>
                ))}
              </div>
            </div>

            {/* Bubble Style */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">Ki·ªÉu tin nh·∫Øn</label>
              <div className="space-y-2">
                {bubbleStyles.map((style) => (
                  <label key={style.id} className="flex items-center gap-3 cursor-pointer">
                    <input
                      type="radio"
                      name="bubbleStyle"
                      value={style.id}
                      checked={settings.appearance.bubbleStyle === style.id}
                      onChange={(e) => updateSetting('appearance', 'bubbleStyle', e.target.value)}
                      className="w-4 h-4 text-purple-600"
                    />
                    <div>
                      <div className="font-medium text-gray-800">{style.name}</div>
                      <div className="text-sm text-gray-600">{style.description}</div>
                    </div>
                  </label>
                ))}
              </div>
            </div>

            {/* Font Size */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">K√≠ch th∆∞·ªõc ch·ªØ</label>
              <div className="grid grid-cols-3 gap-3">
                {fontSizes.map((size) => (
                  <button
                    key={size.id}
                    onClick={() => updateSetting('appearance', 'fontSize', size.id)}
                    className={`p-3 rounded-lg border-2 transition-all ${
                      settings.appearance.fontSize === size.id
                        ? 'border-purple-500 bg-purple-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className={`text-center mb-2 ${
                      size.id === 'small' ? 'text-sm' : 
                      size.id === 'medium' ? 'text-base' : 'text-lg'
                    }`}>{size.sample}</div>
                    <div className="text-sm font-medium text-gray-700">{size.name}</div>
                  </button>
                ))}
              </div>
            </div>
          </div>
        </motion.div>

        {/* Storage & Media */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="card"
        >
          <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
            <Download className="w-5 h-5 text-blue-500" />
            L∆∞u tr·ªØ & Media
          </h3>

          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium text-gray-800">T·ª± ƒë·ªông t·∫£i ·∫£nh</div>
                <div className="text-sm text-gray-600">T·ª± ƒë·ªông t·∫£i xu·ªëng ·∫£nh khi nh·∫≠n</div>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={settings.storage.autoDownloadImages}
                  onChange={(e) => updateSetting('storage', 'autoDownloadImages', e.target.checked)}
                  className="sr-only peer"
                />
                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
              </label>
            </div>

            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium text-gray-800">T·ª± ƒë·ªông t·∫£i video</div>
                <div className="text-sm text-gray-600">T·ª± ƒë·ªông t·∫£i xu·ªëng video khi nh·∫≠n</div>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={settings.storage.autoDownloadVideos}
                  onChange={(e) => updateSetting('storage', 'autoDownloadVideos', e.target.checked)}
                  className="sr-only peer"
                />
                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
              </label>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Ch·∫•t l∆∞·ª£ng media</label>
              <select
                value={settings.storage.mediaQuality}
                onChange={(e) => updateSetting('storage', 'mediaQuality', e.target.value)}
                className="input-field"
              >
                <option value="low">Th·∫•p (ti·∫øt ki·ªám dung l∆∞·ª£ng)</option>
                <option value="medium">Trung b√¨nh</option>
                <option value="high">Cao (ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t)</option>
              </select>
            </div>

            <div className="border-t pt-4">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-gray-700">Dung l∆∞·ª£ng ƒë√£ s·ª≠ d·ª•ng</span>
                <span className="text-sm text-gray-600">234 MB</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2 mb-3">
                <div className="bg-blue-600 h-2 rounded-full" style={{ width: '45%' }}></div>
              </div>
              <button className="text-sm text-red-600 hover:text-red-700 flex items-center gap-2">
                <Trash2 className="w-4 h-4" />
                X√≥a cache v√† media
              </button>
            </div>
          </div>
        </motion.div>
      </div>

      {/* Save Button */}
      <div className="flex justify-end">
        <button className="btn-primary flex items-center gap-2">
          <Save className="w-4 h-4" />
          L∆∞u c√†i ƒë·∫∑t
        </button>
      </div>
    </div>
  )
}
